import EditorActionsManager from "./EditorActionsManager";
import GraphUtilities from "../utils/GraphUtilities";
export default class ShareDBManager {
    readonly NODEMAP_NAME = "nodes";
    readonly EDGEMAP_NAME = "edges";
    readonly LAYOUT_PROPS_NAME = "layoutProperties";
    readonly GLOBAL_OPTS_NAME = "globalOptions";
    readonly GENOMIC_DATA_MAP_NAME = "genomicDataMap";
    readonly VISIBLE_GENOMIC_DATA_MAP_NAME = "visibleGenomicDataMapByType";
    readonly GENOMIC_DATA_GROUP_NAME = "genomicDataGroupList";
    readonly GENOMIC_DATA_GROUP_COUNT = "genomicDataGroupCount";
    graphUtilities: GraphUtilities;
    doc: any;
    postFileLoad: any;
    editor: EditorActionsManager;
    constructor(postFileLoadCallback: any);
    getDoc(): any;
    setEditor(editor: EditorActionsManager): void;
    applyShareDBOperation(op: any): void;
    clearShareDBGenomicData(): void;
    updateShareDBObject(mapName: any, objectKey: any, object: any): void;
    insertShareDBObject(mapName: any, objectKey: any, object: any): void;
    deleteShareDBObject(mapName: any, objectKey: any): void;
    initializeShareDBLayoutProperties(): void;
    initializeShareDBGlobalOptions(): void;
    updateShareDBLayoutProperties(object: any): void;
    updateShareDBGlobalOptions(object: any): void;
    incrementShareDBGroupCount(): void;
    isShareDBReplaceEvent(op: any): any;
    initializeSharedDBDoc(): void;
    shareDBError(err: any): void;
    initShareDB(): void;
    onFileLoaded(): void;
    syncInitialSharedDocData(): void;
    initSharedDocEventHandlers(): void;
    checkShareDBGenomicData(): void;
    getEmptyGroupID(): any;
    groupGenomicData(cancerNames: any, inGroupId: any): void;
    clearGenomicData(): void;
    addGenomicData(geneData: any): void;
    addGenomicVisibilityData(visMap: any): void;
    changeVisibility(nodesToHide: any, isHidden: any): void;
    changeHighlight(elementsToHighlight: any, isHighlighted: any): void;
    addNewNode(nodeData: any, posData: any): void;
    addNewEdge(edgeData: any): void;
    reconnectEdge: (sourceID: any, targetID: any, edgeData: any) => void;
    removeElement(elementID: any): void;
    moveElement(ele: any): void;
    changeElementsPositionByAlignment(coll: any): void;
    resizeElement(ele: any, previousWidth: any, previousHeight: any): void;
    setSizeOfElement(ele: any, newWidth: any, newHeight: any): void;
    resizeCompound(ele: any, minWidth: any, minWidthBiasLeft: any, minWidthBiasRight: any, minHeight: any, minHeightBiasTop: any, minHeightBiasBottom: any): void;
    changeNodePositionsShareDB(nodes: any): void;
    changeHighlightInvalidGenes(nodeIDs: any, isInvalid: any): void;
    addPubmedIDs(edgeID: any, pubmedIDs: any): void;
    removePubmedID(edgeID: any, pubmedIDs: any): void;
    updateEdgeBendPoints(edgeID: any, bendPointsArray: any): void;
    changeName(ele: any, newName: any): void;
    changeParent(rootNode: any, newParentId: any, connectedEdges: any): void;
    removeAllElements(): void;
    loadGraph(nodes: any, edges: any): void;
    mergeGraph(nodes: any, edges: any): void;
    updateLayoutProperties(newLayoutProperties: any): void;
    updateGlobalOptions(newOptions: any): void;
    createGraphHierarchy(nodes: any): any[];
    edgeInitializer(params: any): any;
    nodeInitializer(params: any): any;
    layoutPropertiesInitializer(params: any): any;
    globalOptionsInitializer(params: any): any;
    getCustomObjId(): string;
    getParam(urlParam: any): any;
}
