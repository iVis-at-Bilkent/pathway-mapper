import EditorActionsManager from '../managers/EditorActionsManager';
import FileOperationsManager, { IPathwayInfo } from '../managers/FileOperationsManager';
import { IProfileMetaData, EModalType } from '../ui/react-pathway-mapper';
import ViewOperationsManager from '../managers/ViewOperationsManager';
import GridOptionsManager from '../managers/GridOptionsManager';
import { ILayoutProperties } from '../modals/LayoutProperties';
import { EGridType } from '../modals/GridSettings';
export default class PathwayActions {
    selectedPathway: string;
    fileManager: FileOperationsManager;
    editor: EditorActionsManager;
    undoRedoManager: any;
    pathwayHandler: (pathwayName: string) => void;
    handleOpen: (modalId: EModalType) => void;
    eh: any;
    profiles: IProfileMetaData[];
    gridOptionsManager: GridOptionsManager;
    uploader: any;
    merger: any;
    isCBioPortal: boolean;
    isCollaborative: boolean;
    viewOperationsManager: ViewOperationsManager;
    overlayUploader: any;
    enabledType: EGridType;
    constructor(pathwayHandler: (pathwayName: string) => void, profiles: IProfileMetaData[], fileManager: FileOperationsManager, handleOpen: (modalId: EModalType) => void, isCBioPortal: boolean, isCollaborative: boolean);
    emphasiseQueryGenes(queryGenes: string[]): void;
    getSelectedNodes(): any;
    setLayoutProperties(layoutProperties: ILayoutProperties): void;
    doesCyHaveElements(): boolean;
    toggleGrid(isEnabled: boolean): void;
    toggleGuide(isEnabled: boolean): void;
    adjustGridSettings(gridSize: number, color: string): void;
    resizeToContent(): void;
    align(param: string): void;
    onChangeFile(e: any, isMerge: boolean): void;
    uploadOverlay(): void;
    overlayFromText(file: File): void;
    upload(): void;
    merge(): void;
    setOverlayUploader(inputRef: any): void;
    setUploaders(inputRef: any, isMerge: boolean): void;
    readonly getPathwayInfo: IPathwayInfo;
    setPathwayInfo(other: IPathwayInfo): void;
    undo(): void;
    redo(): void;
    export(isSIFNX: boolean): void;
    resetUndoStack(): void;
    newPathway(): void;
    changePathway(pathwayName: string): void;
    highlightNeighbours(): void;
    highlightSelected(): void;
    validateGenes(): void;
    showAll(): void;
    hideSelected(): void;
    deleteSelected(): void;
    addEdge(edgeTypeIndex: number): void;
    changeNodeName(oldName: string, newName: string): void;
    addNode(nodeType: any): void;
    searchGene(geneName: string): void;
    removeAllData(): void;
    removeAllHighlight(): void;
    processFile(file: File, isMerge: boolean): void;
    saveAs(type: string): void;
    editorHandler(editor: any, eh: any, undoRedoManager: any, viewOperationsManager: ViewOperationsManager, gridOptionsManager: GridOptionsManager): void;
    loadSampleData(): void;
    performLayout(): void;
}
